###########################################
# Seashell Helper                         #
# --------------------------------------- #
# Misc toolkit. To keep other module slim #
###########################################


# Creating a Seashell module is the way to create a directory
# which isn't exist and a file which the Seashell module needs
# ------------------------------------------------------------
# Usage:
#   Seashell.Helper.create_module abc
Seashell.Helper.create_module() {
    local current_path="`pwd`"
    local module_name="$current_path/$1"
    local mod_file="$module_name/mod"

    if [ -z "$1" ]; then Seashell.System.exit "Can't create Seashell module, $1 can not be null!"; fi
    if [ -e "$mod_file" ] || [ -e "$module_name" ]; then Seashell.System.exit "Can't create Seashell module, $1 is exist!"; fi

    mkdir -p "$module_name"
    touch "$mod_file"
    echo "source \"\$SEASHELL_HOME/seashell-init\"" >> "$mod_file"
    echo ""                                         >> "$mod_file"
    echo "mod $1"                                   >> "$mod_file"
    echo ""                                         >> "$mod_file"
    echo "end"                                      >> "$mod_file"
}

# Creating a Seashell namespace
# ------------------------------------------------------------
# Usage:
#   Seashell.Helper.create_namespace Abc.Bcd.Efg
Seashell.Helper.create_namespace() {
    Seashell.Namespace.verify "$1"

    local current_path="`pwd`"
    local mod_file="$current_path/mod"
    local namespace_file="$current_path/src/`Seashell.Namespace.to_path "$1"`"

    if [ ! -e "$mod_file" ]; then Seashell.System.exit "Can't create a namespace not in a module!"; fi
    if [ -e "$namespace_file" ]; then Seashell.System.exit "Can't create a namespace, $namespace_file has been exist!"; fi

    mkdir -p "`dirname "$namespace_file"`"
    touch "$namespace_file"
}

# Creating a Seashell script is the way to create a file and
# reference the Seashell module to it
# ------------------------------------------------------------
# Usage:
#   Seashell.Helper.create_script abc
Seashell.Helper.create_script() {
    local current_path="`pwd`"
    local mod_file="$current_path/mod"
    local script_file="$current_path/bin/$1"

    if [ -z "$1" ]; then Seashell.System.exit "Can't create Seashell module, $1 can not be null!"; fi
    if [ ! -e "$mod_file" ]; then Seashell.System.exit "Can't create a script not in a module!"; fi
    if [ -e "$script_file" ]; then Seashell.System.exit "Can't create a script, $script_file has been exist!"; fi

    mkdir -p "$current_path/bin"
    touch "$script_file"
    echo 'source "$(dirname "$0")/../mod"' >> "$script_file"
    echo -e "\nexecute() {\n    \n}" >> "$script_file"
}

# Make Seashell parsing script and display the final content
Seashell.Helper.archive() {
    export SEASHELL_IS_ARCHIVE=true
}

# Set the color of message
Seashell.Helper.turn_on_debug() {
    export SEASHELL_IS_ARCHIVE=true
    export SEASHELL_DEBUG_QUOTE_BEGIN=$'\e[7m\e[1m\e[4m'"[ "
    export SEASHELL_DEBUG_QUOTE_END=" ]"$'\e[0m'
}

# Generating the content that can be generated by the Seashell script.
Seashell.Helper.generate_doc_header() {
    # Shebang with current shell
    Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}#! /usr/bin/env ${SEASHELL_CURRENT_SHELL}${SEASHELL_DEBUG_QUOTE_END}"

    # Author & Seashell
    Seashell.Log.comment_info "Generated by Seashell 2"
    Seashell.Log.comment_info "User: `whoami`"
    Seashell.Log.comment_info "Date: `date`"
    Seashell.Log.comment_info

    # Shell settings
    if [[ "$SEASHELL_CURRENT_SHELL" == "bash" ]]; then
        Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}shopt -s expand_aliases${SEASHELL_DEBUG_QUOTE_END}"
    fi

    # Function temp global variable
    Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}declare -g SEASHELL_FN_TEMP_SCALAR_RESULT${SEASHELL_DEBUG_QUOTE_END}"
    Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}declare -ag SEASHELL_FN_TEMP_ARRAY_RESULT${SEASHELL_DEBUG_QUOTE_END}"

    # Reset mod & end alias
    Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}alias mod=':'${SEASHELL_DEBUG_QUOTE_END}"
    Seashell.Log.code "${SEASHELL_DEBUG_QUOTE_BEGIN}execute() { :; }${SEASHELL_DEBUG_QUOTE_END}"
    Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}alias end=':'${SEASHELL_DEBUG_QUOTE_END}"

    # Generate die function
    Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}`Seashell.Function.change_name Seashell.System.die die`${SEASHELL_DEBUG_QUOTE_END}"
}

Seashell.Helper.generate_entry_execute_function() {
    Seashell.Log.code "${SEASHELL_DEBUG_QUOTE_BEGIN}execute \"\${SEASHELL_COMMAND_LINE_ARGUMENT[@]}\"${SEASHELL_DEBUG_QUOTE_END}"
}

Seashell.Helper.generate_commandline_argument() {
    if $SEASHELL_IS_ARCHIVE; then
        Seashell.Log.code_for_archive "${SEASHELL_DEBUG_QUOTE_BEGIN}"'SEASHELL_COMMAND_LINE_ARGUMENT=( "$@" )'"${SEASHELL_DEBUG_QUOTE_END}"
    else
        SEASHELL_COMMAND_LINE_ARGUMENT=( "$@" )
    fi
}

# Make Seashell working, it doesn't matter what is
# the argument.
# ------------------------------------------------------------
# Usage:
#   mod module_name
alias mod='Seashell.System.init "${BASH_SOURCE:-$0}" "$@"; :'

# Make your script working. The word, "end", is a confusing name.
# ------------------------------------------------------------
# Usage:
#   mod module_name
#   ...
#   end
alias end='Seashell.System.over; :'

